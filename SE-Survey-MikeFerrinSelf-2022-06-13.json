{"type":"Software Engineering","version":"2.0.0","name":"MikeFerrinSelf","updated":"2022-06-13T18:07:26.065Z","sections":{"Quality and Health":{"competencies":{"Q1":{"category":"Knowledge","competency":"Understands potential attack vectors within applications.","references":{"OWASP":"https://owasp.org/","OWASP: Top 10":"https://owasp.org/www-project-top-ten/","OWASP: API Security":"https://owasp.org/www-project-api-security/"},"examples":{"0":"Has heard of a few common attacks such as XSS and SQL Injection but may not understand how they work.","1":"Is aware of some common attacks from OWASP such as XSS, CSRF, and SQL injection and how they may be used to take advantage of an application.","2":"Familiar with the entire OWASP Top 10 for multiple application types.","3":"Has an in-depth understanding of most types of attack vectors and how they affect and exploit their team's applications. Knows how to avoid unsafe programming patterns, securely configure endpoints, and can guide others in best practices."},"rating":"1","comment":""},"Q2":{"category":"Skill","competency":"Writes code that protects against potential attack vectors.","references":{"OWASP":"https://owasp.org/","OWASP: Top 10":"https://owasp.org/www-project-top-ten/","OWASP: API Security":"https://owasp.org/www-project-api-security/"},"examples":{"0":"Does not consider security when writing code.","1":"Can use a library to protect against common attacks from OWASP such as XSS, CSRF, and SQL injection.","2":"Writes code to defend against attacks when not provided by a library - and understands the security guarantees frameworks do and do not provide.","3":"Can write robust, and well-tested code to protect against many types of attacks for all layers of their team's applications. Makes security vulnerabilities a priority and proactively considers them during planning."},"rating":"1","comment":""},"Q3":{"category":"Behavior","competency":"Analyzes the team's applications attack surface and potential vulnerabilities.","references":{"OWASP":"https://owasp.org/","OWASP: Attacks":"https://www.owasp.org/index.php/Category:Attack","CVE":"https://cve.mitre.org/"},"examples":{"0":"Rarely analyzes the team's applications for vulnerabilities or does not know what vulnerabilities to check for.","1":"Reviews new code written by themselves or others and evaluates how it may be vulnerable to attacks from OWASP.","2":"Reviews both new code and old code for vulnerabilities and also actively refactors old code to make it more secure and resistant to attacks. Responds to security issues quickly.","3":"Consistently analyzes team code for vulnerabilities, actively writes mitigations against common vulnerabilities, and quickly implements fixes or updates for security issues (such as CVE) when found. This person also actively reviews CVE notices for how they may affect QL and team applications."},"rating":"0","comment":""},"Q4":{"category":"Skill","competency":"Understands the monitoring metrics and tools used by the company and how to integrate with them (e.g. logs, usage, system, security).","examples":{"0":"May be familiar with one or two services but does not have a complete picture of all monitoring services used by applications their team supports.","1":"Is aware of core services, their purpose, and which tools to integrate with, but needs guidance to integrate with their application.","2":"Can do complete setup for an application to connect to core services - either directly or through SDKs provided by the company.","3":"Contributes to libraries and SDKs for core services and participates in setting standards, including evaluation of those tools and systems. (Grafana, Splunk, App Dynamics, SCOM, Zabbix, Acunetix, etc) "},"rating":"2","comment":""},"Q5":{"category":"Skill","competency":"Profiles an application to identify and implement performance enhancements.","examples":{"0":"Does not know how to test application performance or ignores performance metrics when writing code.","1":"Can connect a profiler to their application and understands its output to identify inefficient codeblocks.","2":"Takes an active and consistent interest in profiling and monitoring and often uses tools to identify and improve expensive code paths.","3":"Knows how to measure performance and bottlenecks at all tiers of their application and frequently optimizes application code to be more efficient. Considers performance tuning part of the shipping process."},"rating":"2","comment":""},"Q6":{"category":"Knowledge","competency":"Understands different metrics of application health and performance.","examples":{"0":"Has limited familiarity with application health, error handling, and other metrics of quality.","1":"Understands at a high level the signals of application health and performance and the factors that impact them.","2":"Knows what should be optimized within the team's applications and when optimization is less necessary due to diminishing returns.","3":"Understands the most important metrics for measuring application health and performance such as response time, throughput, error rates, logging and how to respond appropriately at various thresholds. Does what it takes to ensure a high-performance application (proactively and reactively)."},"rating":"1","comment":""},"Q7":{"category":"Behavior","competency":"Follows established development standards (security, performance, testing, coding style).","examples":{"0":"Is unaware of team or company standards or often ignores them.","1":"Is aware of company and community standards for development languages and processes. May ignore standards on occasion to ship features sooner for business partners and demands.","2":"Follows company standards and understands the importance of adhering to them. Actively seeks out senior developers if unsure on best practices and when no clear company guidelines are available.","3":"Sets an example for others in following standards and doing the right thing. Addresses NFRs and actively works to ensure compliance with company standards. Works hard to adhere to standards without cutting corners to ship sooner."},"rating":"3","comment":""},"Q8":{"category":"Behavior","competency":"Analyzes the team's applications and fixes errors.","examples":{"0":"Often needs assistance from other engineers to fix bugs or find effective solutions.","1":"Fixes simple bugs - usually from the backlog and identified by QA or other engineers.","2":"Makes fixing bugs a priority and actively works on drawing attention to them during planning. Can quickly identify and fix bugs even in code written by others.","3":"Proactively writes defensive code. Can quickly spot bugs or problematic code during code reviews. Has a deep understanding of the team's codebases and understands the importance of fixing bugs and minimizing Known Shippables."},"rating":"3","comment":""},"Q9":{"category":"Skill","competency":"Identifies, explains, and resolves software issues.","examples":{"0":"Can assist with troubleshooting issues but may have difficulty finding their exact causes and requires supervision from a more experienced team member.","1":"Can troubleshoot and fix simple issues found by QA. Often needs help to identify an issue but can fix it under guidance from a more senior developer.","2":"Quickly resolves and fixes issues of all types within the team's applications. Works well with QA to explain bugs and help troubleshoot as well as quickly promoting changes back to be able to be tested. Completes features reliably and needs minimal back and forth with QA before their tasks are accepted and certified.","3":"Can quickly troubleshoot issues, find bugs and their solutions. Efficiently identifies issues in pressure situations such as outages. The Go-To person when other developers cannot isolate and identify issues."},"rating":"2","comment":""},"Q10":{"category":"Skill","competency":"Writes code that fails gracefully and handles error conditions (e.g. service failures, logging).","examples":{"0":"Has limited familiarity with how to best handle edge cases or error conditions.","1":"Can write code that handles errors and exceptions from dependent systems or libraries. Also appropriately surfaces errors to the user with errors or exceptions in severe scenarios that cannot be recovered. Knows how to avoid leaking sensitive code or details from users in these scenarios.","2":"Can write robust code that defends against common error scenarios such as bad responses from services and log the appropriate information to allow quick and efficient troubleshooting. Understands the severity of different types of errors and when they should be suppressed or surfaced to the user.","3":"Has deep knowledge and understanding of how error handling works in all aspects of the team's applications. Has written error handlers and knows how to safely log errors for monitoring. Writes code to protect against all situations - including rare failures or edge cases. Can write code that is defensive and fails gracefully for client or user experience."},"rating":"2","comment":""}}},"Programming Concepts":{"competencies":{"C1":{"category":"Skill","competency":"Writes maintainable and modular code.","examples":{"0":"Can write code and complete issues with oversight from more experienced engineers.","1":"Implements quickly and correctly. Demonstrates regular, incremental, and visible progress. Avoids coupling and over-architecting.","2":"Can be trusted to write small systems or libraries in a well-architected and modular manner without oversight. Comments their code well and writes software with flexibility and users in mind.","3":"Has written large-scale applications or libraries while maintaining solid software architecture using best practices. Writes thoughtful code that takes users into account and considers readability and comprehension a priority (principle of least surprise)."},"rating":"2","comment":""},"C2":{"category":"Knowledge","competency":"Understands common development principles (e.g. DRY, KISS, YAGNI).","references":{"Wikipedia: Software Development Philosophies":"https://en.wikipedia.org/wiki/List_of_software_development_philosophies"},"examples":{"0":"Has heard of common software engineering principles and practices, but may lack understanding why they are important.","1":"Is aware of a few basic software development philosophies such as YAGNI, KISS and how they affect software design and development.","2":"Has a complete understanding of several software development philosophies, and has experience using them in practice - including when ignoring them caused issues or made development more difficult.","3":"Understands many development principles and philosophies, how they affect the process of software development and software engineering and the quality of software - including when they are important to follow and when there may be reason to ignore or bypass them."},"rating":"2","comment":""},"C3":{"category":"Knowledge","competency":"Understands object-oriented programming paradigms and patterns.","examples":{"0":"Knows what OOP is and the differences between OOP and other paradigms such as functional or procedural programming.","1":"Understands and is familiar with basic OOP fundamentals such as objects, inheritance, data modeling and relationships. Knows all SOLID principles.","2":"Understands OOP and more advanced topics such as domain driven design, composition, and the law of demeter. Familiar with SOLID, GRASP, and many other design patterns such as factories, repositories, facades, decorators, etc and has used them when developing.","3":"Has in depth knowledge of most OOP design patterns and has built or managed large-scale software using them."},"rating":"2","comment":""},"C4":{"category":"Knowledge","competency":"Understands functional programming paradigms and patterns.","examples":{"0":"Knows what FP is and the differences between FP and other paradigms such as object-oriented or procedural programming.","1":"Understands FP basics such as first-class functions, higher-order functions, closures, immutability, and statelessness.","2":"Understands more advanced FP topics such as monads, currying, accumulators, pipelines, fold/reduce, map, etc and has used them when developing.","3":"Has deep knowledge of most functional programming design patterns and has built or managed large-scale software using them."},"rating":"1","comment":""},"C5":{"category":"Knowledge","competency":"Understands different methods of encryption (e.g. symmetric, asymmetric, authenticated).","examples":{"0":"Has basic understanding of common encryption methods, but may be unfamiliar with what data in QL we encrypt and in which scenarios.","1":"Understands at a high level the different methods of encryption and how we use them at QL.","2":"Understands the value of encryption and the importance of the various methods including symmetric, asymmetric, and hashing including when they should be used and what type of data they should be used with.","3":"Has in-depth familiarity with various implementations of crypto and using them in a production environment. Has great knowledge of most crypto algorithms including how to use them and their costs."},"rating":"1","comment":""}}},"Tooling":{"competencies":{"T1":{"category":"Knowledge","competency":"Understands the various types of testing and their importance (e.g. unit, functional, acceptance, user).","examples":{"0":"Familiar with some form of testing, but may not know the differences between various testing methods.","1":"Understands the differences between unit and integration testing and when they are used in the team's applications.","2":"Understands the value of multiple types of test suites for an application or software and the different scenarios they help protect against. Knows how to write most types of tests for their team's projects.","3":"Has in-depth knowledge on the various types of testing and the value they add. Understands all types of testing and what is needed to make automated test suites robust enough to cover nearly every scenario and enable continuous deployment."},"rating":"2","comment":""},"T2":{"category":"Behavior","competency":"Writes comprehensive tests for all code.","examples":{"0":"Can write unit tests, but needs encouragement or guidance.","1":"Proactively writes unit tests or acceptance tests for their projects.","2":"Has used both TDD and BDD and has significant experience with at least one of them. Helps push the bar higher on code coverage and other testing metrics for projects they are involved in.","3":"A champion of automated testing. Has experience writing all types of tests including unit tests and acceptance or integration tests. A proponent of high code coverage (>90%) and enforces that standard on their projects."},"rating":"2","comment":""},"T3":{"category":"Skill","competency":"Performs VCS management such as committing, merging, handling conflicts.","examples":{"0":"Understands version control and its importance in software development. Has limited familiarity with the VCS used by the team.","1":"Can use team's version control system to perform simple functions such as commits, branches and merging. May be reliant on a GUI or non-console interface.","2":"Can perform complex functions such as rebasing, bisect, searching through vcs history, check-in locks, stashing, and partial staging. Knows the dangers of some commands and how to avoid losing data.","3":"Understands the meaning behind VCS commands and how they work. Comfortable with console or CLI. Can handle conflict resolution for any situation and recovering data when something goes wrong. Often helps others when they have a vcs-related issue."},"rating":"2","comment":""},"T4":{"category":"Knowledge","competency":"Understands best practices for multi-person or team workflows and branch/merging strategies.","examples":{"0":"May be aware of branching strategies when working within a team, but lacks understanding or experience with release management processes for promoting code to deployment environments.","1":"Is familiar with development and branching workflows used at QL and knows what is required of them as a developer. Understands the concepts of continuous integration, continuous deployment, and continuous delivery.","2":"Has an in-depth understanding of multiple development workflows such as git flow, trunk-based development, branch-based development and why some workflows may work better for certain situations. Involved in defining the workflow and improving the development and vcs integration process for their projects and team.","3":"Has experience with multiple workflows and how they work with different team sizes. Understands the trade-offs with different development strategies and how to balance between the needs of development teams and business partners for change management. Considered an expert in this domain and helps many teams across the company improve their processes and learn optimal development and vcs processes."},"rating":"1","comment":""},"T5":{"category":"Knowledge","competency":"Understands requirements and process for compiling and building applications in their domain.","examples":{"0":"Can compile and run applications built by their team in a development environment but lacks understanding of how the process works.","1":"Understands the individual commands, scripts and processes for building their applications - both for development and in a build environment for release.","2":"Has an in-depth understanding of the processes run in order to build and compile their team's projects including system requirements and dependencies. Has experience with writing scripts for automating the build process and is keenly aware of the differences between compiling on a dev machine and for deployment. Aware of specific QL processes or caveats for our enterprise environment including consideration of our staging environments and network conditions. Can quickly debug issues that arise anywhere in the toolchain.","3":"Has extensive knowledge of how to build and compile projects across the enterprise for a wide range of project types - including awareness of both unix and windows-based projects. Actively works on process improvement for simpler, faster, and more reproducible builds. An expert in the release management process - often consults and assists other teams and developers with troubleshooting."},"rating":"2","comment":""},"T6":{"category":"Knowledge","competency":"Understands requirements and process for deploying applications in their domain.","examples":{"0":"Can deploy the team's applications using QL tools and systems through a GUI or app but lacks understanding of how the process works.","1":"Understands the individual commands, scripts or processes for deploying their applications.","2":"Has an in-depth understanding of the processes run in order to deploy their team's projects to multiple environments - including both on-premises and cloud. Aware of specific QL processes or caveats for our enterprise environment including consideration of our staging environments and network conditions. Can quickly debug issues that arise anywhere in the process.","3":"Has extensive knowledge of how to deploy projects across the enterprise for a wide range of project types - including awareness of both unix and windows-based projects. Actively works on process improvement for simpler, faster, and more consistent deployments. An expert in the release management process - often consults and assists other teams and developers with troubleshooting."},"rating":"1","comment":""},"T7":{"category":"Knowledge","competency":"Understands the release management pipeline and how to set up for applications in their domain.","references":{"Wikipedia: Release engineering":"https://en.wikipedia.org/wiki/Release_engineering"},"examples":{"0":"Has basic familiarity with the change management tools used by the team but may not know the processes and protocols to follow.","1":"Understands how to use the tools, systems and platforms used by their team including project and change management systems and the required processes QL has defined for promoting code to production.","2":"Knows the entire software development process and SDLC from task intake to production deployment including requirements gathering, testing and promotion through environments. Helps define the standards and processes that the team follows for release management.","3":"Often helps define best practices and standards across the company for release management. A leading voice on the team with a focus on the shipping process - taking in requirements and delivering high quality code to clients as quickly and safely as possible. An expert of release engineering for their team and others."},"rating":"1","comment":""},"T8":{"category":"Knowledge","competency":"Understands the implications of changing or updating dependencies.","examples":{"0":"May have basic familiarity with one or two common package managers (can install or update libraries).","1":"Familiar with package management and how to import both internal and external third party libraries.","2":"Understands the implications of using third party code and evaluates when to use them based on security, reliability, and community support. Knows how to use native package managers for their team's applications such as nuget, composer, npm, hex, and others. Has knowledge of vendoring, locked dependencies or shrinkwrapping, and verifying trust such as signing code and authorship.","3":"Has in-depth knowledge and experience with package managers and dependency management for multiple application ecosystems or languages. Understands the impact of relying on public systems or services for dependency management and what can be done to reduce risk of downtime for QL. Understands software licensing - both open source and proprietary - and their ramifications for software use."},"rating":"1","comment":""}}},"Integration":{"competencies":{"I1":{"category":"Knowledge","competency":"Understands the value of frameworks/libraries and how to use them effectively.","examples":{"0":"Aware of the frameworks used by the team but has limited experience with them.","1":"Knows the value of shared frameworks. Has used frameworks and knows how take advantage of their features to be more efficient to reduce boilerplate code and development time.","2":"Digs deeply into framework and library documentation or code and knows the frameworks and libraries used by the team's applications in great detail.","3":"Has great experience with frameworks and comparing the features they provide to judge which frameworks or libraries should be used by the team's applications. Works with architects and identifies opportunities to serve the QL developer community with shared code or solve common problems across development teams."},"rating":"1","comment":""},"I2":{"category":"Knowledge","competency":"Understands how to properly implement authentication and authorization.","references":{"RBAC":"https://en.wikipedia.org/wiki/Role-based_access_control","ACL":"https://en.wikipedia.org/wiki/Access_control_list","Wikipedia: OpenID":"https://en.wikipedia.org/wiki/OpenID","Wikipedia: SAML":"https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language"},"examples":{"0":"May have implemented simple login or authentication but does not have an understanding of best practices.","1":"Understands how to integrate their team's applications with company authentication methods such as active directory and Ping Single Sign On for internal team members or Auth for clients.","2":"Has experience with implementing both authorization and authentication for their team's applications. Understands the security requirements and concerns for gating access to sensitive data and follows best practices both from QL and the industry.","3":"Understands implementation details for many authentication protocols such as NTLM, Kerberos, OAuth, OpenID Connect, and SAML. Has familiarity with authorization methods used within the company such as Authorizor and Active Directory - or has implemented their own RBAC or ACL system."},"rating":"0","comment":""},"I3":{"category":"Behavior","competency":"Creates and publishes reusable libraries or modules.","examples":{"0":"Has not contributed to shared libraries used by others.","1":"Has contributed to a library or module used by multiple projects - including those outside of their own team.","2":"A primary contributor to several shared libraries such as service SDKs or frameworks. Encourages others to move reusable code into separate libraries for greater impact and sharing.","3":"Actively maintains large libraries or modules used across the company. Has great knowledge of maintaining packages and takes developer experience into account when making changes - including following consistent versioning schemes. Likely involved in the maintenance and administration of internal package repositories."},"rating":"0","comment":""},"I4":{"category":"Behavior","competency":"Evangelizes and exhibits open-source mindset.","references":{"ThoughtWorks: The Culture of Open Source":"https://www.thoughtworks.com/insights/blog/culture-open-source"},"examples":{"0":"Has no open source awareness or is not involved in internal or external knowledge and code sharing.","1":"Evangelizes collaboration and open source culture.","2":"Understands the benefits QL receives from open-source and value of contributing back to the industry. Encourages collaboration through code reviews, knowledge share, and open collaboration on software projects.","3":"Involved in promoting QL open-source efforts - both internally (virtual teams) and externally (has open-sourced high-quality code)."},"rating":"1","comment":""},"I5":{"category":"Knowledge","competency":"Understands inter-system communication protocols (e.g. REST, SOAP, RPC, Queues).","references":{"Apache Thrift":"https://en.wikipedia.org/wiki/Apache_Thrift","Amazon Ion":"https://amznlabs.github.io/ion-docs/","Transit":"https://github.com/cognitect/transit-format"},"examples":{"0":"May have experience integrating with external systems through libraries but has limited understanding of the underlying protocols.","1":"Has familiarity and experience with common protocols used for inter-system communication at QL such as REST and SOAP.","2":"Can build a service used by other services or systems using best practices and industry-standard protocols. Understands the value of following standards in designing public APIs.","3":"Understands in-depth of communication protocols and common enterprise system architecture such as service buses, queues, and event-driven architecture. Has familiarity with optimizing data transport layers through protocols and formats such as Apache Thrift, Amazon Ion, Transit, etc."},"rating":"1","comment":""},"I6":{"category":"Behavior","competency":"Respects how code changes may affect downstream consumers.","examples":{"0":"Makes changes without fully considering or testing the impact to users (bugs, breaking changes, code churn, etc).","1":"Writes documentation such as usage guides, changelogs and version release notes for libraries and systems they author.","2":"Understands best practices for inter-system communication and building public APIs. Minimizes breaking changes and has respect for users and consumers of their services or libraries.","3":"Takes care to present a thoughtful developer or client experience - such as simple APIs, pleasant documentation, and clear error messages. Has experience with or uses concepts such as API versioning, feature flags, semantic versioning in their systems or libraries to lessen change impact to consumers."},"rating":"2","comment":""},"I7":{"category":"Behavior","competency":"Helps design and encourage community standards (e.g. performance, testing, coding style).","examples":{"0":"Is not involved in defining community standards or shows no interest.","1":"Participates and provides feedback on standards for the development community (internally or externally).","2":"Understands the value of common standards and guides discussions and driving consensus among their team or multiple teams.","3":"A domain expert and thought leader within a development community. Helps teams and entire communities develop standards to improve their collaboration methods."},"rating":"2","comment":""}}},"Full Stack":{"competencies":{"F1":{"category":"Skill","competency":"Writes different types of applications (e.g. console, web, API, native, embedded).","examples":{"0":"Has production experience with only one type of application.","1":"Is familiar with the specific use cases and needs of multiple types of applications. Has contributed to developing systems from multiple categories of application.","2":"Can make significant contributions that follow company standards and NFRs to systems from multiple categories of application.","3":"Has architected or built a significant portion of several production-quality systems from multiple categories of application."},"rating":"1","comment":""},"F2":{"category":"Knowledge","competency":"Knowledgeable of multiple data management systems and when they are most effective.","examples":{"0":"Has heard of RDBMS but has limited experience with them.","1":"Is familiar with RDBMS and has used a SQL backend for a production-quality application - including writing queries.","2":"Has great knowledge of at least one database system and used it extensively. Is familiar with other types of database systems. Has experience managing databases such as defining schema and writing queries, migrations, and backups.","3":"Has in-depth understanding of many types of databases and their strengths and weaknesses including SQL, Graph DB, Key-value, and Document-store. Has used multiple types of database backends in production systems."},"rating":"1","comment":""},"F3":{"category":"Skill","competency":"Can set up a complete local environment for a system (e.g. IDE, runtime, web servers, database).","examples":{"0":"Can set up the basic technology used by the team but not a complete development environment to the company's standards using core services.","1":"Can follow documentation and set up system dependencies to develop their team's applications. May need guidance from more senior engineers to help troubleshoot.","2":"Can set up development environment for all layers of the team's applications with minimal or no oversight.","3":"Defines procedure and writes documentation for set up of development environment and has in-depth knowledge of system dependencies and how to install them - including any required VMs, databases or system tools. Actively works on process improvement and knowledge share with others."},"rating":"1","comment":""},"F4":{"category":"Knowledge","competency":"Understands underlying operating system and how to integrate and configure runtime for application code.","examples":{"0":"Has experience using the command line for the OS used by the team.","1":"Understands how to install runtimes (VM, interpreter, etc) used by team's application code and run both code and tests against the runtime. Knows how to pull information out of the runtime such as version information, installed extensions or modules, etc.","2":"Knows how to install application runtimes from source if possible. Understands integration points between system and application - including dependencies on dynamically linked libraries or other system dependencies. Can install custom modules or extensions and knows to manage system dependencies through system package managers such as yum, apt-get, chocolatey, etc.","3":"Has extensive experience managing system dependencies and requirements for installing and running applications in production configuration. Understands the requirements for integrating with native system's launcher (e.g. win services, system.d, init.d, supervisor, etc) for creating robust app server setups."},"rating":"1","comment":""},"F5":{"category":"Skill","competency":"Can make changes to all levels of the team's projects (e.g. client-side, frontend, backend, database).","examples":{"0":"Contributes to at least one level of the team's applications - and can read and provide input/code review others.","1":"Can make changes to several layers of the team's applications.","2":"Can make changes to all layers of the team's applications and actively improves their knowledge and familiarity with all components of the team's systems.","3":"Writes high quality, idiomatic and tested code for multiple layers of the team's applications such as client-side javascript, backend .net, and database queries and schema. Has in-depth understanding of each layer and can dive deep when necessary."},"rating":"1","comment":""}}},"Vision and Growth":{"competencies":{"V1":{"category":"Skill","competency":"Learns new libraries and how to use them effectively.","examples":{"0":"Does not seek out or investigate new libraries that may be useful to the team and increase efficiency.","1":"Reads documentation to learn usage options and guidelines for libraries and can implement a new library in an existing application. May need guidance for configuring them for use in an enterprise setting to company standards.","2":"Can implement a new library or framework in a safe and maintainable manner. Knows where to find high quality libraries and when to use them in the enterprise.","3":"Can implement new libraries and frameworks and share that knowledge with others. Can dive deep into others' code to seek a greater understanding beyond what the documentation may provide. Uses third-party code wisely and avoids being tightly coupled to specific implementations. Knows how to analyze libraries for code quality and security."},"rating":"1","comment":""},"V2":{"category":"Behavior","competency":"Avoids writing code unnecessarily by using existing internal or open source solutions.","examples":{"0":"Does not seek out or investigate new libraries that may be useful to the team and increase efficiency.","1":"Knows where to find available internal or external (open source) packages that are compatible with their team's applications and seeks them out before starting large new issues or projects. Understands the value of having common shared libraries and not reinventing the wheel by writing unnecessary code.","2":"Seeks out new libraries and technologies in their application space and how they make their applications better. Implements third party libraries when a high quality option exists and knows when it is valuable to write their own implementation that meets the needs of QL.","3":"Actively encourages an open-source culture and shared common libraries to reduce the need for rewriting code. Helps the internal community come together and increase knowledge share and sharing of code. Has experience with a wide range of third party libraries, SDKs, and frameworks and helps guides others looking for code solutions."},"rating":"1","comment":""},"V3":{"category":"Skill","competency":"Learns new languages or systems and knows when it is appropriate to introduce them.","examples":{"0":"Has shown limited interest in learning new technology beyond that used by the team.","1":"Has learned basics of a new technology or language and written code or implemented it during a Hack Week project.","2":"Demonstrates curiosity and interest in learning new technology and applying it to QL to make themselves and others more efficient or produce higher quality software. Works with architects to investigate new technology or products when introduced into the company or the team's applications.","3":"Actively investigates and reviews new technology such as programming languages or services and tools such as database technologies. Can justify their use and when to make use of them within QL in an enterprise setting. Understands the ramifications of introducing a new technology within QL in a mission critical system. Has discovered, researched, and implemented a new technology within QL while satisfying NFRs and company standards for quality and security."},"rating":"1","comment":""},"V4":{"category":"Behavior","competency":"Is actively involved with development communities (e.g. giving talks, helping others).","examples":{"0":"Does not actively participate in IT communities or contribute knowledge back to other developers.","1":"Participates in IT communities and actively involved in developing standards and best practices across teams and applications.","2":"Gives talks during Hack Week and IT communities. Actively looks for ways to share knowledge and improve developer skills. Mentors other engineers in both an unofficial and official capacity.","3":"Leads an IT community. Works to improve developer relations and recruiting at QL. Mentors other engineers and frequently gives talks both within QL and outside of QL at conferences or meetups. Is a domain expert and makes great effort to be available to assist other developers and teams."},"rating":"1","comment":""},"V5":{"category":"Behavior","competency":"Stays current on new and upcoming technologies.","examples":{"0":"Has shown limited interest in learning new technology beyond that used by the team.","1":"Learns about new technology in the industry by attending Hack Week experiments, attending conferences, or reading online materials, blogs, and articles.","2":"Shows active interest and curiosity in new initiatives and services or systems within QL. Stays up to date on new libraries or technology in their domain. Knows about upcoming changes or versions of libraries or frameworks used by the team and shares that knowledge with others.","3":"Has their finger on the pulse of technology and the industry. Actively stays current on all technologies in their domain including frontend, backend, database, and any other systems used by their team - even components they do not directly contribute too. Usually one of the first in the company to know about an upcoming technology and how it may be useful."},"rating":"1","comment":""}}},"Architecture":{"competencies":{"A1":{"category":"Behavior","competency":"Designs extensible and composable systems (e.g. services, APIs, modules).","examples":{"0":"Needs guidance to avoid adding technical debt or over-engineered components.","1":"Contributes to extensible codebases and considers coupling, implementation flexibility when writing software.","2":"Significant contributor to a composable software system and writes decoupled code to avoid service and vendor lock-in. Thinks ahead and considers long-term vision of their applications to minimize technical debt and increase velocity of delivery to stakeholders.","3":"Leads development for one or more large-scale extensible and modular systems. Drives best practices and engagement within their developer community for building better systems within the enterprise."},"rating":"1","comment":""},"A2":{"category":"Knowledge","competency":"Understands how their team's applications integrate with external systems.","examples":{"0":"Has limited understanding of the system topology and dependency graph of the team's applications.","1":"Understands the dependencies such as services and databases of their team's applications and how they communicate with them.","2":"Familiar with the dependency graph of their team's applications and what systems they are reliant on - including specific data contracts and specifications in addition to endpoints or services used. Understands service failures or errors and how to handle them gracefully with methods such as back-offs, exponential timeouts and when to surface those error conditions to consumers.","3":"Drives application and system design to be more resilient and less coupled to changes to upstream services. Sets best practices for inter-system communication using common protocols and industry standards for performance, security, and interoperability."},"rating":"1","comment":""},"A3":{"category":"Knowledge","competency":"Understands system architectural patterns and when to use them effectively.","references":{"Wikipedia: Software Architecture Styles and Patterns":"https://en.wikipedia.org/wiki/List_of_software_architecture_styles_and_patterns"},"examples":{"0":"May be familiar with common architectural patterns but has no hands-on experience with them.","1":"Familiar with system architectural patterns such as SOA, microservices, monoliths, multi-tenancy, containerization and more.","2":"Understands the benefits and trade-offs of different architectures and has experience using that knowledge to be a significant contributor to the design and implementation of a production system.","3":"Has in-depth knowledge on many types of system architecture and most in use within the company. Understands the impact each type of architecture has on operational concerns such as scalability, availability, consistency, backups, monitoring and logging as well as development concerns such as simplicity, flexibility, ownership, and autonomy."},"rating":"0","comment":""},"A4":{"category":"Knowledge","competency":"Understands the flow of data used by their team's systems.","examples":{"0":"Has limited understanding of the system topology and dependency graph of the team's applications.","1":"Understands the flow of data (such as client, user, or loan data) within their team's systems including the source systems and source of truth for data consumed by their systems. Knows what PII and PIFI are.","2":"Has in-depth knowledge of methods of safeguarding data and follows best practices with regards to encryption and security. Understands the requirements and best practices for protecting data both internal and externally-accessible as well as at-rest and in-flight. Follows NFRs for data management.","3":"Understands data sanitization and both the requirements and limitations of data formats, storage and transport used across the enterprise. Sets standards for protecting data and pushes others to be more respectful and protective of company data."},"rating":"1","comment":""},"A5":{"category":"Behavior","competency":"Addresses current and prevents future technical debt.","references":{"Wikipedia: Technical debt":"https://en.wikipedia.org/wiki/Technical_debt"},"examples":{"0":"Writes code as quickly as possible without concern for technical debt or has a history of contributing towards it.","1":"Understands the concept of technical debt and takes an active and consistent interest in addressing it.","2":"Writes well-thought out code that has minimal negative impact to the long-term technical wellbeing of the project. Evaluates their own code for technical debt and seeks thoughts and advice from others in the form of legitimate code reviews and design sessions. Identifies technical debt within their team's application. Frequently tackles technical debt during iterations.","3":"Carefully considers the impact of changes on their codebases and the future ability to make changes to it. Brings attention to technical debt and other intangible factors that may slow development - including presenting solutions to address them and prioritizing them. Designs and writes software that is more resilient to technical debt and actively researches for new patterns and behaviors to protect against it. Often has a technical vision for their projects and plans to address internal software technical debt as well as system or integration issues."},"rating":"2","comment":""},"A6":{"category":"Skill","competency":"Can effectively explain architectural decisions to technical and non-technical partners.","examples":{"0":"Has some difficulty effectively explaining technical solutions to non-engineer team members.","1":"Can explain their technical decisions and implementations to other engineers and clarify software concepts to non-engineer members of their team.","2":"Effectively describes in-depth software design and architecture designs to both technical and non-technical partners to drive consensus among projects and teams.","3":"Can tailor messaging, documentation and presentations to contain the right amount of details for specific target audiences - including engineers and senior leaders. Thoughtfully considers feedback and input from all partners and collaborates with others to come to the best solution for the company."},"rating":"2","comment":""},"A7":{"category":"Behavior","competency":"Writes effective documentation both in and outside of code (e.g. comments, changelog, architecture, system design, gliffies).","examples":{"0":"Rarely writes documentation or only when prompted.","1":"Consistently writes good documentation in code such as comments and API documentation.","2":"Writes technical and non-technical documentation both in code and outside of code such as system references, project decisions and architecture. Keeps documentation up-to-date to ensure correctness and clarity.","3":"Writes clear, thorough, and useful documentation in every facet of software development. Comments code consistently and clearly. Designs system architecture and data modeling diagrams. Authors simple upgrade and usage guidelines for users of their applications and libraries. Encourages others to document their software and processes to increase shared knowledge."},"rating":"1","comment":""},"A8":{"category":"Knowledge","competency":"Has expert knowledge in a specialized domain.","references":{"Wikipedia: Domain engineering":"https://en.wikipedia.org/wiki/Domain_knowledge","Wikipedia: Domain knowledge":"https://en.wikipedia.org/wiki/Domain_engineering","Wikipedia: Domain":"https://en.wikipedia.org/wiki/Domain_(software_engineering)","Wikipedia: Subject-matter expert":"https://en.wikipedia.org/wiki/Subject-matter_expert","ArtSoft: Domains of expertise":"http://www.artsoft-consult.ro/areas-of-application/domains-of-expertise/"},"examples":{"0":"Has shown limited interest in diving deep and becoming an expert in a specialized technology or business area.","1":"Shows an active and consistent curiosity in a specialized domain or area of expertise relevant to the company beyond their primary language. Actively looks for opportunities to be involved in company projects and initiatives in those domains.","2":"Actively pursues their interest as a specialist in one or more significant business-impacting domains. Shows consistent progress and growth with their experience and knowledge.","3":"Has deep knowledge in a specialized domain. Has experience with designing, architecting, and building software in that domain. Recognized in the company as a domain expert."},"rating":"2","comment":""},"A9":{"category":"Knowledge","competency":"Understands how to create scalable software.","examples":{"0":"Has no familiarity or experience with creating software that can scale efficiently.","1":"Familiar with metrics and tests used for determining scalability of software. Understands best practices to improve scalability of the languages and systems used by their team.","2":"Has in-depth knowledge of design patterns to improve scalability such as statelessness, caching, lazy loading, asynchronous processing and uses them in their software designs and implementations. Works with Ops to improve handling of availability, backups, monitoring, logging, and documentation.","3":"An expert in writing efficiently scalable software. Understands scalability concerns and remedies for all layers of a traditional software stack including applications, services, and databases. Frequently measures performance of their software and improves optimization and efficiency."},"rating":"1","comment":""},"A10":{"category":"Knowledge","competency":"Understands how to create and manage distributed software and systems.","examples":{"0":"Has no familiarity or experience with creating or managing distributed systems.","1":"Has familiarity with distributed computing paradigms and principles such as SOA, message queues, clustering, CAP Theorem, shared-nothing, and parallelism vs concurrency.","2":"Has experience with setup, administration, and use of distributed systems such as distributed databases, clustered services, or peer-to-peer applications.","3":"Has in-depth knowledge and experience with distributed computing architectures and applications. Understands the benefits, trade-offs and challenges of building distributed systems in real-world scenarios."},"rating":"0","comment":""}}}}}